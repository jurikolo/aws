AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for Lambda that returns requester source IP address

Parameters:
  APIGATEWAYSTAGENAME:
    Description: API Gateway stage name
    Type: String
    AllowedPattern: "[a-z0-9]+"
  APIGATEWAYHTTPMETHOD:
    Description: API Gateway HTTP method
    Type: String
    AllowedValues:
      - POST
      - PUT
      - GET
      - DELETE
      - ANY
  LAMBDAFUNCTIONNAME:
    Description: Lambda function name
    Type: String
    AllowedPattern: "[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+"
  DOMAIN:
    Description: Domain name
    Type: String
    AllowedPattern: (?!-)[a-zA-Z0-9-.]{1,63}(?<!-)
    ConstraintDescription: Must be a valid DNS zone name
  HOSTEDZONE:
    Description: Hosted zone name
    Type: String
    AllowedPattern: (?!-)[a-zA-Z0-9-.]{1,63}(?<!-)
    ConstraintDescription: Must be a valid DNS zone name
  CERTIFICATEARN:
    Description: Certificate ARN for API Gateway
    Type: String

Resources:
  LambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${LAMBDAFUNCTIONNAME}:*
          PolicyName: lambda

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          def handler(event,context):
            return {
              'body': event['requestContext']['identity']['sourceIp'],
              'headers': {
                'Content-Type': 'text/plain'
              },
              'statusCode': 200
            }
      Description: Return requester source IP address
      FunctionName: !Ref LAMBDAFUNCTIONNAME
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt LambdaIAMRole.Arn
      Runtime: python3.8

  LambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      # note: if route *not* at API Gateway root, `SourceArn` would take the form of:
      #               arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/${APIGATEWAYSTAGENAME}/${APIGATEWAYHTTPMETHOD}/PATH_PART
      SourceArn:
        Fn::Sub:
          - "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/${APIGATEWAYSTAGENAME}/${APIGATEWAYHTTPMETHOD}/"
          - ApiGateway: !ImportValue lambda-rest-api-gateway-id

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${LAMBDAFUNCTIONNAME}
      RetentionInDays: 90

  ApiGatewayRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: !Ref APIGATEWAYHTTPMETHOD
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - LambdaArn: !GetAtt LambdaFunction.Arn
      ResourceId:
        Fn::ImportValue: lambda-rest-api-gateway-root-resource-id
      RestApiId:
        Fn::ImportValue: lambda-rest-api-gateway-id

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayRootMethod
    Properties:
      RestApiId:
        Fn::ImportValue: lambda-rest-api-gateway-id
      StageName: !Ref APIGATEWAYSTAGENAME
      StageDescription:
        CachingEnabled: false
        DataTraceEnabled: false
        Description: Default stage
        ThrottlingBurstLimit: 5
        ThrottlingRateLimit: 5

  ApiGatewayCustomDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Ref DOMAIN
      RegionalCertificateArn: !Ref CERTIFICATEARN
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiGatewayMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref DOMAIN
      RestApiId:
        Fn::ImportValue: lambda-rest-api-gateway-id
      Stage: !Ref APIGATEWAYSTAGENAME

  ApiGatewayUsagePlan:
    Type: 'AWS::ApiGateway::UsagePlan'
    Properties:
      ApiStages:
        - ApiId:
            Fn::ImportValue: lambda-rest-api-gateway-id
          Stage: !Ref APIGATEWAYSTAGENAME
      Description: source-ip API usage plan
      Quota:
        Limit: 1000
        Period: MONTH
      Throttle:
        BurstLimit: 5
        RateLimit: 5
      UsagePlanName: SourceIpUsagePlan

  LambdaDNSName:
    Type: AWS::Route53::RecordSetGroup
    DependsOn: ApiGatewayCustomDomain
    Properties:
      HostedZoneName: !Join [ '', [ !Ref 'HOSTEDZONE', . ] ]
      RecordSets:
        - Name: !Ref 'DOMAIN'
          Type: A
          AliasTarget:
            HostedZoneId:
              Fn::GetAtt:
                - ApiGatewayCustomDomain
                - RegionalHostedZoneId
            DNSName:
              Fn::GetAtt:
                - ApiGatewayCustomDomain
                - RegionalDomainName

Outputs:
  LambdaArn:
    Value: !GetAtt LambdaFunction.Arn
    Export:
      Name: lambda-source-ip-arn

  RegionalDomainName:
    Value:
      Fn::GetAtt:
        - ApiGatewayCustomDomain
        - RegionalDomainName
    Export:
      Name: lambda-source-ip-regional-domain-name